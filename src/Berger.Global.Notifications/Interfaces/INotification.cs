using System;
using System.Collections;
using System.Linq.Expressions;
using System.Collections.Generic;

namespace Berger.Global.Notifications.Interfaces
{
    public interface INotification<T>
    {
        int Count();
        bool IsValid();
        bool IsInvalid();
        IReadOnlyCollection<NotificationViewModel> Messages { get; }
        void AddNotification(string property, string message);
        void AddNotification(string property, string message, params object[] parameters);
        void AddNotification(NotificationViewModel notification);
        void AddNotifications(ICollection<NotificationViewModel> notifications);
        void AddNotifications(IList<NotificationViewModel> notifications);
        void AddNotifications(IReadOnlyCollection<NotificationViewModel> notifications);
        void ClearNotifications();
        void CustomCreate(string property, string message);
        bool HasNotifications();
        void IfAreEquals(Expression<Func<T, string>> selector, string text, string message = "");
        void IfAreEquals(Expression<Func<T, decimal>> selector, decimal value, string message = "");
        void IfAreEquals(decimal val, decimal value, string objectName, string message = "");
        void IfAreEquals(int val, int value, string objectName, string message = "");
        void IfAreEquals(Expression<Func<T, double>> selector, double value, string message = "");
        void IfAreEquals(Expression<Func<T, DateTime>> selector, DateTime value, string message = "");
        void IfAreEquals(string val, string text, string objectName, string message = "");
        void IfAreEquals(Expression<Func<T, int>> selector, int value, string message = "");
        void IfAreEquals(Expression<Func<T, float>> selector, float value, string message = "");
        void IfAreEquals(float val, float value, string objectName, string message = "");
        void IfAreEquals(DateTime val, DateTime value, string objectName, string message = "");
        void IfAreEquals(double val, double value, string objectName, string message = "");
        void IfCollectionIsNull(Expression<Func<T, IEnumerable>> selector, string message = "");
        void IfCollectionIsNull(IEnumerable val, string objectName, string message = "");
        void IfCollectionIsNullOrEmpty(IEnumerable<T> val, string objectName, string message = "");
        void IfCollectionIsNullOrEmpty(Expression<Func<T, IEnumerable<T>>> selector, string message = "");
        void IfContains(string val, string text, string objectName, string message = "");
        void IfContains(Expression<Func<T, string>> selector, string text, string message = "");
        void IfEnumInvalid(Expression<Func<T, Enum>> selector, string message = "");
        void IfEnumInvalid(Enum val, string objectName, string message = "");
        void IfEqualsZero(float val, string objectName, string message = "");
        void IfEqualsZero(int val, string objectName, string message = "");
        void IfEqualsZero(Expression<Func<T, decimal>> selector, string message = "");
        void IfEqualsZero(decimal val, string objectName, string message = "");
        void IfEqualsZero(Expression<Func<T, float>> selector, string message = "");
        void IfEqualsZero(Expression<Func<T, int>> selector, string message = "");
        void IfFalse(bool val, string objectName, string message = "");
        void IfFalse(Expression<Func<T, bool>> selector, string message = "");
        void IfGreaterOrEqualsThan(Expression<Func<T, DateTime>> selector, DateTime date, string message = "");
        void IfGreaterOrEqualsThan(int val, int number, string objectName, string message = "");
        void IfGreaterOrEqualsThan(decimal val, decimal number, string objectName, string message = "");
        void IfGreaterOrEqualsThan(Expression<Func<T, float>> selector, float number, string message = "");
        void IfGreaterOrEqualsThan(Expression<Func<T, decimal>> selector, decimal number, string message = "");
        void IfGreaterOrEqualsThan(double val, double number, string objectName, string message = "");
        void IfGreaterOrEqualsThan(float val, float number, string objectName, string message = "");
        void IfGreaterOrEqualsThan(Expression<Func<T, double>> selector, double number, string message = "");
        void IfGreaterOrEqualsThan(Expression<Func<T, int>> selector, int number, string message = "");
        void IfGreaterOrEqualsThan(DateTime val, DateTime date, string objectName, string message = "");
        void IfGreaterThan(double val, double max, string objectName, string message = "");
        void IfGreaterThan(Expression<Func<T, double>> selector, double max, string message = "");
        void IfGreaterThan(Expression<Func<T, float>> selector, float max, string message = "");
        void IfGreaterThan(float val, float max, string objectName, string message = "");
        void IfGreaterThan(Expression<Func<T, int>> selector, int max, string message = "");
        void IfGreaterThan(int val, int max, string objectName, string message = "");
        void IfGreaterThan(decimal val, decimal max, string objectName, string message = "");
        void IfGreaterThan(DateTime val, DateTime max, string objectName, string message = "");
        void IfGreaterThan(Expression<Func<T, DateTime>> selector, DateTime max, string message = "");
        void IfGreaterThan(Expression<Func<T, decimal>> selector, decimal max, string message = "");
        void IfInvalidContract(global::FluentValidation.AbstractValidator<T> validator);
        void IfLengthGreaterThan(Expression<Func<T, string>> selector, int max, string message = "");
        void IfLengthGreaterThan(string val, int max, string objectName, string message = "");
        void IfLengthLowerThan(Expression<Func<T, string>> selector, int min, string message = "");
        void IfLengthLowerThan(string val, int min, string objectName, string message = "");
        void IfLengthNoEqual(string val, int length, string objectName, string message = "");
        void IfLengthNoEqual(Expression<Func<T, string>> selector, int length, string message = "");
        void IfLowerOrEqualsThan(double val, double number, string objectName, string message = "");
        void IfLowerOrEqualsThan(Expression<Func<T, float>> selector, float number, string message = "");
        void IfLowerOrEqualsThan(Expression<Func<T, int>> selector, int number, string message = "");
        void IfLowerOrEqualsThan(float val, float number, string objectName, string message = "");
        void IfLowerOrEqualsThan(int val, int number, string objectName, string message = "");
        void IfLowerOrEqualsThan(Expression<Func<T, double>> selector, double number, string message = "");
        void IfLowerOrEqualsThan(DateTime val, DateTime date, string objectName, string message = "");
        void IfLowerOrEqualsThan(Expression<Func<T, decimal>> selector, decimal number, string message = "");
        void IfLowerOrEqualsThan(Expression<Func<T, DateTime>> selector, DateTime date, string message = "");
        void IfLowerOrEqualsThan(decimal val, decimal number, string objectName, string message = "");
        void IfLowerThan(Expression<Func<T, float>> selector, float min, string message = "");
        void IfLowerThan(float val, float min, string objectName, string message = "");
        void IfLowerThan(int val, int min, string objectName, string message = "");
        void IfLowerThan(Expression<Func<T, decimal>> selector, decimal min, string message = "");
        void IfLowerThan(Expression<Func<T, DateTime>> selector, DateTime min, string message = "");
        void IfLowerThan(decimal val, decimal min, string objectName, string message = "");
        void IfLowerThan(DateTime val, DateTime min, string objectName, string message = "");
        void IfLowerThan(Expression<Func<T, int>> selector, int min, string message = "");
        void IfLowerThan(Expression<Func<T, double>> selector, double min, string message = "");
        void IfLowerThan(double val, double min, string objectName, string message = "");
        void IfNotAreEquals(DateTime val, DateTime value, string objectName, string message = "");
        void IfNotAreEquals(Expression<Func<T, string>> selector, string text, string message = "");
        void IfNotAreEquals(Expression<Func<T, int>> selector, int value, string message = "");
        void IfNotAreEquals(string val, string text, string objectName, string message = "");
        void IfNotAreEquals(float val, float value, string objectName, string message = "");
        void IfNotAreEquals(Expression<Func<T, float>> selector, float value, string message = "");
        void IfNotAreEquals(int val, int value, string objectName, string message = "");
        void IfNotAreEquals(Expression<Func<T, decimal>> selector, decimal value, string message = "");
        void IfNotAreEquals(Expression<Func<T, double>> selector, double value, string message = "");
        void IfNotAreEquals(double val, double value, string objectName, string message = "");
        void IfNotAreEquals(decimal val, decimal value, string objectName, string message = "");
        void IfNotAreEquals(Expression<Func<T, DateTime>> selector, DateTime value, string message = "");
        void IfNotCnpj(Expression<Func<T, string>> selector, string message = "");
        void IfNotCnpj(string val, string objectName, string message = "");
        void IfNotContains(Expression<Func<T, string>> selector, string text, string message = "");
        void IfNotContains(string val, string text, string objectName, string message = "");
        void IfNotCpf(Expression<Func<T, string>> selector, string message = "");
        void IfNotCpf(string val, string objectName, string message = "");
        void IfNotDate(Expression<Func<T, string>> selector, string message = "");
        void IfNotDate(string val, string objectName, string message = "");
        void IfNotEmail(string val, string objectName, string message = "");
        void IfNotEmail(Expression<Func<T, string>> selector, string message = "");
        void IfNotGuid(string val, string objectName, string message = "");
        void IfNotGuid(Expression<Func<T, string>> selector, string message = "");
        void IfNotMatch(Expression<Func<T, string>> selector, string regex, string message = "");
        void IfNotMatch(string val, string regex, string objectName, string message = "");
        void IfNotNull(decimal? val, string objectName, string message = "");
        void IfNotNull(Expression<Func<T, DateTime>> selector, string message = "");
        void IfNotNull(Expression<Func<T, DateTime?>> selector, string message = "");
        void IfNotNull(DateTime val, string objectName, string message = "");
        void IfNotNull(DateTime? val, string objectName, string message = "");
        void IfNotNull(Expression<Func<T, decimal?>> selector, string message = "");
        void IfNotNull(float? val, string objectName, string message = "");
        void IfNotNull(object val, string objectName, string message = "");
        void IfNotNull(Expression<Func<T, object>> selector, string message = "");
        void IfNotNull(int? val, string objectName, string message = "");
        void IfNotNull(Expression<Func<T, double?>> selector, string message = "");
        void IfNotNull(double? val, string objectName, string message = "");
        void IfNotNull(Expression<Func<T, int?>> selector, string message = "");
        void IfNotNull(Expression<Func<T, float?>> selector, string message = "");
        void IfNotNullOrEmpty(Expression<Func<T, string>> selector, string message = "");
        void IfNotNullOrEmpty(string val, string objectName, string message = "");
        void IfNotRange(DateTime val, DateTime a, DateTime b, string objectName, string message = "");
        void IfNotRange(Expression<Func<T, decimal>> selector, decimal a, decimal b, string message = "");
        void IfNotRange(Expression<Func<T, int>> selector, int a, int b, string message = "");
        void IfNotRange(Expression<Func<T, float>> selector, float a, float b, string message = "");
        void IfNotRange(float val, float a, float b, string objectName, string message = "");
        void IfNotRange(decimal val, decimal a, decimal b, string objectName, string message = "");
        void IfNotRange(Expression<Func<T, double>> selector, double a, double b, string message = "");
        void IfNotRange(Expression<Func<T, DateTime>> selector, DateTime a, DateTime b, string message = "");
        void IfNotRange(int val, int a, int b, string objectName, string message = "");
        void IfNotRange(double val, double a, double b, string objectName, string message = "");
        void IfNotUrl(Expression<Func<T, string>> selector, string message = "");
        void IfNotUrl(string val, string objectName, string message = "");
        void IfNull(DateTime val, string objectName, string message = "");
        void IfNull(DateTime? val, string objectName, string message = "");
        void IfNull(Expression<Func<T, DateTime>> selector, string message = "");
        void IfNull(double? val, string objectName, string message = "");
        void IfNull(Expression<Func<T, DateTime?>> selector, string message = "");
        void IfNull(Expression<Func<T, decimal?>> selector, string message = "");
        void IfNull(float? val, string objectName, string message = "");
        void IfNull(Expression<Func<T, object>> selector, string message = "");
        void IfNull(decimal? val, string objectName, string message = "");
        void IfNull(Expression<Func<T, float?>> selector, string message = "");
        void IfNull(Expression<Func<T, double?>> selector, string message = "");
        void IfNull(object val, string objectName, string message = "");
        void IfNull(Expression<Func<T, int?>> selector, string message = "");
        void IfNull(int? val, string objectName, string message = "");
        void IfNullOrEmpty(Expression<Func<T, string>> selector, string message = "");
        void IfNullOrEmpty(string val, string objectName, string message = null);
        void IfNullOrInvalidLength(Expression<Func<T, string>> selector, int min, int max, string message = "");
        void IfNullOrInvalidLength(string val, int min, int max, string objectName, string message = "");
        void IfNullOrWhiteSpace(Expression<Func<T, string>> selector, string message = "");
        void IfNullOrWhiteSpace(string val, string objectName, string message = "");
        void IfRange(int val, int a, int b, string objectName, string message = "");
        void IfRange(Expression<Func<T, DateTime>> selector, DateTime a, DateTime b, string message = "");
        void IfRange(Expression<Func<T, double>> selector, double a, double b, string message = "");
        void IfRange(Expression<Func<T, int>> selector, int a, int b, string message = "");
        void IfRange(decimal val, decimal a, decimal b, string objectName, string message = "");
        void IfRange(DateTime val, DateTime a, DateTime b, string objectName, string message = "");
        void IfRange(Expression<Func<T, float>> selector, float a, float b, string message = "");
        void IfRange(Expression<Func<T, decimal>> selector, decimal a, decimal b, string message = "");
        void IfRange(float val, float a, float b, string objectName, string message = "");
        void IfRange(double val, double a, double b, string objectName, string message = "");
        void IfTrue(bool val, string objectName, string message = "");
        void IfTrue(Expression<Func<T, bool>> selector, string message = "");
        void Dispose();
    }
}